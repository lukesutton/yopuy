import Foundation

/**
  Encodes a request — path, URL, body etc — and is generated by the `Service`.
  It's generic types are there for the `Path` instance it captures.
*/
public struct Request<R: Resource, P, M> {
  /**
    The `Path` for this request. Which encodes the `Resource`, the response —
    single or many — and the HTTP method.
  */
  public let path: Path<R, P, M>

  /**
    The fully-qualified URL for the request.
  */
  public let URL: URL

  /**
    The values to be encoded into a query string.
  */
  public let query: [String: String]?

  /**
    The request body encoded as a string.
  */
  public let body: String?

  fileprivate let _headers: [Header]?

  /**
    The request headers.
  */
  public var headers: [Header]? {
    return _headers
  }

  init(path: Path<R, P, M>, URL: URL, headers: [Header]?, query: [String: String]?, body: String?) {
    self.path = path
    self.URL = URL
    self._headers = headers
    self.query = query
    self.body = body
  }
}

/**
  The `Request` type conforms to `AdapterRequest`, which allows it to be passed
  to a `HTTPAdapter` type.
*/
extension Request: AdapterRequest {
  /**
    The request headers encoded as strings.
  */
  public var headers: [String: String]? {
    guard let headers = _headers else { return nil }
    var result: [String: String] = [:]
    for header in headers {
      let (k, v) = header.pair
      result[k] = v
    }

    return result
  }
}
